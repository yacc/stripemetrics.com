== 2013-06-17 ==
* import status - done
* fix customer deleted imports from csv file
* chart title ( + link to full screen chart)
* chart customer churn

* check email "info@stripemetrics.com"
* new imports should happen every hour|day
* fix google analytics (stripe analytics)
* deploy/update api server
* update cli
* update or remove buy buttons
* landing page should have more keywords

== 2013-06-16 ==
* fix sde and cde imports - done

== 2013-06-15 ==
* Deploying latest code: - done
  * web, we alredy have :
    ANSIBLE_SSH_ARGS="" ansible-playbook playbooks/deploy.yml -i ansible_hosts
  * need to write deamon deploy task 
  * Manually deploying to workers
    ssh deploy@173.255.253.167
    cd /home/deploy/www/stripemetrics
    git pull origin master
    vim /home/deploy/environment.yml
    cd /home/deploy/www/stripemetrics/base
    bundle install
    QUEUE='*' COUNT='6' RAILS_ENV=production bundle exec rake resque:workers    
* deploy new code to thw worker nodes (benchmark and adjust #workers) - done
  http://thomasmango.com/2010/05/27/resque-in-production/

info on devops: subl ~/dev/devops/stripemetrics.howto.txt

== 2013-06-13 ==
* new imports should happen every hour|day
* fix google analytics (stripe analytics)
* deploy/update api server
* deploy new code to thw worker nodes (benchmark and adjust #workers)
  http://thomasmango.com/2010/05/27/resque-in-production/
* update cli
* update or remove buy buttons
* landing page should have more keywords

== 2013-06-13 ==
* test the imports jobs run, wo crashing :-) - done
  QUEUE='*' COUNT='4' bundle exec rake resque:workers 
  bundle exec env rake resque:workers QUEUE='*' COUNT='4'
  http://stackoverflow.com/questions/10424087/resque-multiple-workers-in-development-mode
* schedule aggregation somehow (after create of import or in cronjob) -  done
* redis web page: http://stripemetrics.dev/rescousse - done (leboss|u2canSee!)

== 2013-06-12 ==
* removing all reference to import_director - done
* specing other import types - done 
* implementing other import types wo import director - done
* user registration triggers imports - done

== 2013-06-11 ==
just installed spork
bundle exec rspec spec/models/
bundle exec rspec spec/models/imports

== 2013-06-10 ==

Here's the idea to manage the imports:
the import director schedules an import with an interval [start_ts,end_ts]
import = Import.create(ts_import_from,ts_import_to)
         1/ contact Stripe and import 100 data points
         2/ import.end_at = last_data_point.created
         3/ if more objects exist then schedule another import
            new_ts_import_from = import.end_at
            new_ts_import_to = ts_import_to
            new_import = Import.create(new_ts_import_from,new_ts_import_to)
Import
  after_create -> enqeue import job
  after_save -> update my import_director (with what ?)            

== 2013-06-06 ==

working on imports, stripe APIs are really screwy for imports ... 
rspec spec/models/import_spec.rb

app/models/import.rb
* only counting now, not saving imported data
* API import is not going to work when 

==== Older =====
  def map
    emit_type = (@type == 'count' ? '{count: 1}' : '{:amount:amount}' )
    map = if @interval == 'day'
      %Q{
        function() {
            day = Date.UTC(this.created.getFullYear(), this.created.getMonth(), this.created.getDate());
            emit({day: day, user_id: this.user_id}, #{emit_type});
        }                
      }
    elsif @interval == 'month'
      %Q|
        function() {
            month = Date.UTC(this.created.getFullYear(), this.created.getMonth());
            emit({month: month, user_id: this.user_id}, #{emit_type});
        }                
      |        
    end 
  end

  def reduce
    emit_type   = (@type == 'count' ? "{count: 1}" : "{:amount:amount}" )
    reduce_type = (@type == 'count' ? "count += v['count']" : "amount += v['amount']")

    reduce = %Q|
        function(key, values) {
            var count  = 0;
            var amount = 0;
            values.forEach(function(v) {
                #{reduce_type};
            });
            return #{emit_type};
        }
    | 
  end


===== customer created =====
events = Stripe::Event.all({:count => count, :offset => offset,:type => 'customer.created'},token)
events.data.first

1.9.3p125 :024 > events.data.first => #<Stripe::Event:0x81c40cd0> JSON: {"id":"evt_1WsgKxqiasXKnv","created":1364272966,"livemode":false,"type":"customer.created","data":{"object":{"id":"cus_1Wsg9Q9wDW6AUH","object":"customer","created":1364272966,"livemode":false,"description":"210 yacinb+0325@gmail.com 0:usd:month:7 on staging","active_card":null,"email":"yacinb+0325@gmail.com","delinquent":false,"subscription":null,"discount":null,"account_balance":0}},"object":"event","pending_webhooks":1}


====== customer subscritpion created ======
events = Stripe::Event.all({:count => count, :offset => offset,:type => 'customer.subscription.created'},token)
events.data.first

 => #<Stripe::Event:0x81c839f4> JSON: {"id":"evt_1WsgP3uU8mTD51","created":1364272966,"livemode":false,"type":"customer.subscription.created","data":{"object":{"plan":{"id":"0:usd:month:7","interval":"month","name":"Sensr Plan usd 0/month","amount":0,"currency":"usd","object":"plan","livemode":false,"interval_count":1,"trial_period_days":7},"object":"subscription","start":1364272966,"status":"trialing","customer":"cus_1Wsg9Q9wDW6AUH","cancel_at_period_end":false,"current_period_start":1364272966,"current_period_end":1490503285,"ended_at":null,"trial_start":1364272966,"trial_end":1490503285,"canceled_at":null,"quantity":1}},"object":"event","pending_webhooks":1}

====== customer subscription deleted =====
events = Stripe::Event.all({:count => count, :offset => offset,:type => 'customer.subscription.deleted'},token)
event.data.first
=> #<Stripe::Event:0x81e9f51c> JSON: {"id":"evt_1Wsk3Tqfqn7IRn","created":1364273227,"livemode":false,"type":"customer.subscription.deleted","data":{"object":{"plan":{"id":"0:usd:month:7","interval":"month","name":"Sensr Plan usd 0/month","amount":0,"currency":"usd","object":"plan","livemode":false,"interval_count":1,"trial_period_days":7},"object":"subscription","start":1364272966,"status":"canceled","customer":"cus_1Wsg9Q9wDW6AUH","cancel_at_period_end":false,"current_period_start":1364272966,"current_period_end":1490503285,"ended_at":1364273227,"trial_start":1364272966,"trial_end":1490503285,"canceled_at":1364273227,"quantity":1}},"object":"event","pending_webhooks":1}

====== customer deleted =====
{"id":"evt_1XDZXtDMlpg3QV","created":1364350661,"livemode":false,"type":"customer.deleted","data":{"object":{"id":"cus_1WTl23tpQroXTl","object":"customer","created":1364180256,"livemode":false,"description":"1 user-0047@sensr.net 995:usd:month:7 on test","email":"user-0047@sensr.net","subscription":{"plan":{"id":"995:usd:month:7","interval":"month","name":"Sensr Plan usd 995/month","amount":995,"currency":"usd","object":"plan","livemode":false,"interval_count":1,"trial_period_days":7,"identifier":"995:usd:month:7"},"object":"subscription","start":1364180256,"status":"trialing","customer":"cus_1WTl23tpQroXTl","current_period_start":1364180256,"current_period_end":1490410334,"trial_start":1364180256,"trial_end":1490410334,"quantity":1},"account_balance":0}},"object":"event","pending_webhooks":2},

======= DATA needed for cohort analysis ========


percentage of users activated on month (k) are still active on month (n)
percentage of users activated on month (k) are canceling on month (n)

Retention Rate:
---------------      
      0   1   3   4   5  .... mo(k)
mo 0  100 90  88  80  70%    <- how many users that activated on month(i) are still active on month(k) 
mo 1 
....
....
mo(i)


subscription:
  created
  canceled
  customer_id

customer_import
  oldest_ts     # timestamp of oldest customer imported
  newest_ts     # timestamp of most recent customer imported
  import     # array of timestamps when import occured

import
  type   "customer, charges etc ...
  status "processing,failed|succeeded"
  time   elapsed time to complete the import
  count  how many records where imported


for all customers do |customer|
  import customer
    if customer.is_deleted? 
      find the deleted event to get the date
    else  
      import subscription 


======= Usefull analytics ======================

Trailing 30 days acquisition -> new customers 
Trailing 30 days cancelation
Trailing 30 days revenue

Churns (last 30 days) 
CLV (customer live time value)
Churn rate
Monthly revenue last month
Monthly revenue projected

======= Open Questions ===========================================
* can I query a subscription that was deleted by subscription id ?
no, but I can query a deleted customer through the API (by id)
* 
* 


== FLOW of events when a customer is deleted =====================
1.9.3p125 :004 > cu = Stripe::Customer.retrieve("cus_1WTl23tpQroXTl")
 => #<Stripe::Customer:0x80552e60> JSON: {
  "id": "cus_1WTl23tpQroXTl",
  "object": "customer",
  "created": 1364180256,
  "livemode": false,
  "description": "1 user-0047@sensr.net 995:usd:month:7 on test",
  "email": "user-0047@sensr.net",
  "subscription": {"plan":{"id":"995:usd:month:7","interval":"month","name":"Sensr Plan usd 995/month","amount":995,"currency":"usd","object":"plan","livemode":false,"interval_count":1,"trial_period_days":7,"identifier":"995:usd:month:7"},"object":"subscription","start":1364180256,"status":"trialing","customer":"cus_1WTl23tpQroXTl","current_period_start":1364180256,"current_period_end":1490410334,"trial_start":1364180256,"trial_end":1490410334,"quantity":1},
  "account_balance": 0,
  "next_recurring_charge": {"date":"2017-03-25","amount":995}
}
1.9.3p125 :005 > cu.delete
 => #<Stripe::Customer:0x80552e60> JSON: {
  "id": "cus_1WTl23tpQroXTl",
  "deleted": true
}
1.9.3p125 :006 > cu1 = Stripe::Customer.retrieve("cus_1WTl23tpQroXTl")
 => #<Stripe::Customer:0x810a88c8> JSON: {
  "id": "cus_1WTl23tpQroXTl",
  "deleted": true
} 

---> customer.deleted event (but no customer.subscription.deleted)
1.9.3p125 :010 > evts = Stripe::Event.all
 => #<Stripe::ListObject:0x8064c1a4> JSON: {
  "object": "list",
  "count": 2189345,
  "url": "/v1/events",
  "data": [
    {"id":"evt_1XDZXtDMlpg3QV","created":1364350661,"livemode":false,"type":"customer.deleted","data":{"object":{"id":"cus_1WTl23tpQroXTl","object":"customer","created":1364180256,"livemode":false,"description":"1 user-0047@sensr.net 995:usd:month:7 on test","email":"user-0047@sensr.net","subscription":{"plan":{"id":"995:usd:month:7","interval":"month","name":"Sensr Plan usd 995/month","amount":995,"currency":"usd","object":"plan","livemode":false,"interval_count":1,"trial_period_days":7,"identifier":"995:usd:month:7"},"object":"subscription","start":1364180256,"status":"trialing","customer":"cus_1WTl23tpQroXTl","current_period_start":1364180256,"current_period_end":1490410334,"trial_start":1364180256,"trial_end":1490410334,"quantity":1},"account_balance":0}},"object":"event","pending_webhooks":2},


=== 
once I've ran those two, my customer and subscription are updated with the latest cancelations

ImportStripeSubscriptionDeletedEvents
ImportStripeCustomerDeletedEvents

=== 2012-03-27 ===

now that I have all my import workers ready to import : charges, customers, subscriptions, events 
I have, theoreticaly:
* Customers with "created" and "canceled" dates
* Subscriptions with "created" and "canceled" dates

1/ run imports with no date limit:
  ImportStripeCharges
  ImportStripeCustomerDeletedEvents
  ImportStripeCustomers
  ImportStripeSubscriptionDeletedEvents


2/ run aggregation with no date limit

  UpdateAcquisitionTrend
  UpdateChargeTrend

  this gives me three trends:
  has_one  :acquisition_trend
  has_one  :paid_charge_trend
  has_one  :failed_charge_trend

3/ write cohort worker
4/ write table view to display cohort data
5/ write dashboard views and partials
6/ write mailer and re-use the dashboard views 
 
=== 2012-03-28 ===

make sure the resque web ui is running:
[yacin@mac stripemetrics (import_events)]$ bundle exec resque-web
[2013-03-28 16:11:59 -0700] Starting 'resque-web'...
[2013-03-28 16:11:59 -0700] trying port 5678...

Tested import of Customers and Charges.

=== 2012-03-29 ===

need to test, import of events and then aggregations.
import of events : understand json serialzation of stripe objects

=== 2012-04-01 ===

admin.stripemetrics.com
api.stripemetrics.com
stripemetrics.com

stripemetrics setup
              import
              refresh
              report -basic
                     -email yacinb@gmail.com

API:
https://api.stripemetrics.com/v1/


import/create -upload file.csv
              [-stripe]
refresh/create
report/get
      email,basic,

just installed jsonpp (pretty print json from command line ... excelent !)

TODO:
* laverage figaro for .dotcloud configuration (branhc out and submit pull request)
* update devise to support:
** password authentication
** token authenticable
* add grape to build API
* re-oarganize code :
  stripemetrics/api
                admin
                www


=== 2012-04-03 ===

deploy and make the API server work
once it works on dotcloud, implement authentication

Pre-compiling the assets:
env RAILS_ENV=production DATABASE_URL=scheme://127.0.0.1/stripemetrics_development:27017 bundle exec rake assets:precompile 2>&1
env RAILS_ENV=production DATABASE_URL=scheme://127.0.0.1/dbname bundle exec rake assets:precompile 2>&1






